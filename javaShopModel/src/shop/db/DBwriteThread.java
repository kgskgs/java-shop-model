/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shop.db;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.concurrent.BlockingQueue;

/**
 * Thread used to insert/update in the database 
 * @author K1
 */
public class DBwriteThread extends Thread {
    
    private final Statement state;
    //execute batch after number of statements
    public static final int BATCH_EXEC_SIZE = 10;
    
    //# of strings added to the current batch
    private int queryC;
    private String tmpQueryStr;
    
    private final BlockingQueue<String> queryStrQueue;
    
    public DBwriteThread(Connection con, BlockingQueue<String> q) throws SQLException{
        this.queryC = 0;
        
        setName("DBwriteThread");
        
        state = con.createStatement();
        queryStrQueue = q;
    }

    /**
     * Wait for statements to be added to the queue.
     * If the number of statements exceed BATCH_EXEC_SIZE or forceCommit flag is set,
     * write the statements to the database
     */
    @Override
    public void run() {
        System.out.println(Thread.currentThread().getName() + " runs");
        while(true){
            try {
                    tmpQueryStr = queryStrQueue.take(); //take blocks the thread

                    System.out.println(tmpQueryStr);
                    if (tmpQueryStr != "fc"){
                        state.addBatch(tmpQueryStr);
                        queryC++;
                    }

                    if(queryC >= BATCH_EXEC_SIZE || tmpQueryStr == "fc"){ 
                        System.out.println(state.toString());
                        state.executeBatch();
                        reportCommit();
                        queryC = 0;
                    }
            } 
            catch (SQLException ex) {
                System.err.println(ex.getSQLState());
                ex.printStackTrace();
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            } 
        }
    }

    

    /**
     * inserts a single statement into the database and gets autogenerated key
     * this will run on the caller thread - only used when we need the key immediately 
     * @param sqlStr sql command to be executed
     * 
     * @param state Statement to execute the command
     * @return generated key or -1 on failure
     */
    public static int commitGetKey(String sqlStr, Statement state){
        int key = -1;
        ResultSet rs;
        
        try {
            System.out.println(Thread.currentThread().getName() +": commiting 1 statements to database");
            state.executeUpdate(sqlStr, Statement.RETURN_GENERATED_KEYS);
            
            rs = state.getGeneratedKeys();
            
            if (rs.next()) {
                key = rs.getInt(1);
            } else {
                System.out.println("failed getting generated key");
            }
            
            
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        
        return key;
    }
    
    /**
     * prints # of statements written to database 
     */
    private void reportCommit(){
        System.out.println(Thread.currentThread().getName() +": commiting " + queryC + " statements to database");
    }
    
}
